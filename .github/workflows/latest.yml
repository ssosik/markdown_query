name: Latest builds

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          release_name: Latest
          draft: true
          prerelease: true
  build:
    needs: create_release # we need to know the upload URL
    runs-on: ${{ matrix.os }}
    strategy:
      # Adapted from https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
      matrix:
        build: [linux, macos]
        include:
        - build: linux
          os: ubuntu-latest
          rust: nightly
          target: x86_64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Get package version
      shell: bash
      run: |
        echo "XQ_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name =="xq") | .version')" >> $GITHUB_ENV

    - name: Install build dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
          sudo apt-get install --yes build-essential jq
          # HACK!!!!! This is a hack to convince xapian-core that it doesn't
          # need a '-luuid' flag
          sudo rm /usr/include/linux/uuid.h /usr/include/uuid/uuid.h

    #- name: Install packages (macOS)
    #  if: matrix.os == 'macos-latest'
    #  run: |
    #    ci/macos-install-packages

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Set up build target
      shell: bash
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV

    - name: Build
      run: make release

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/xq"

    - name: Build archive
      shell: bash
      run: |
        staging="xq-${{ env.XQ_VERSION }}-${{ matrix.target }}"
        mkdir -p "$staging"
        cp "target/${{ matrix.target }}/release/xq" "$staging/"
        tar czf "$staging.tar.gz" "$staging"
        echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

    - name: Upload release assets
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
